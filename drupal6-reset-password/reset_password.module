<?php
// $Id$
/**
 * @file
 * 
 */


/**
 * implements hook_init()
 */
function reset_password_init(){
     
} //end function sales_incentive_init

/**
 *  Implementation of hook_perm().
 */
function reset_password_perm(){
	return array('Reset Password');
}


/**
 * Implements hook_menu()
 */
function reset_password_menu(){
    // Admin configuration group.
    $items['admin/settings/reset_password'] = array(
            'title' => 'Reset and Email Password',
            'description' => 'Reset and Email Password',
            'page callback' => 'drupal_get_form',
            'page arguments' => array('reset_password_form'),
            'access arguments' => array('Reset Password'),
            'type' => MENU_NORMAL_ITEM
    );
    return $items;
} //ends hook_menu()

function reset_password_form($form_state){
    $form = array();
    
    $form['password_reset_email'] = array(
          '#type' => 'fieldset',
          '#title' => t('Password and Email Reset'),
          '#collapsible' => FALSE
    );
    
    $cp_partner_name_options = user_list();
    
    //To populate the list of users you might need to re-write the user_list() function. Currently this function fetches all the current users that are registered.
    
    $form['password_reset_email']['pass_reset_username_dropdown'] = array(
        '#type' => 'select',
        '#title' => t('Select a username'),
        '#options' => $cp_partner_name_options,
    );
    
    $form['password_reset_email']['pass_reset_username_textbox'] = array(
        '#type' => 'textfield',
        '#title' => t('Or type a username'),
        '#maxlength' => 101,
    );
    
    $form['password_reset_email']['pass_reset_email_textbox'] = array(
        '#type' => 'textfield',
        '#title' => t('Or type email address'),
        '#maxlength' => 101,
    );
    
    $form['password_reset_email']['pass_reset_send_mail'] = array(
        '#type' => 'checkbox',
        '#title' => t('Send the temporary password via E-mail?'),
    );
    
    
    $form['password_reset_email']['cp_preview'] = array(
        '#type'=> 'submit',
        '#value'=> 'Generate temporary password'
    );
    
    return $form;
} // end function sales_incentive_form


function reset_password_form_validate($form, $form_state){
    if(!$form_state['values']['pass_reset_username_dropdown'] && !$form_state['values']['pass_reset_username_textbox'] && !$form_state['values']['pass_reset_email_textbox']){
        form_set_error('pass_reset_username_dropdown', t('You must either select an user from the drop down or type and user name/email in the appropriate text field'));
    }
    if($form_state['values']['pass_reset_username_textbox'] && db_result(db_query("SELECT COUNT(*) FROM {users} WHERE name = '".trim($form_state['values']['pass_reset_username_textbox'])."' ")) < 1){
        form_set_error('pass_reset_username_textbox', t('This is not a registered user.'));
    }
    if($form_state['values']['pass_reset_email_textbox']){
        if(!is_valid_email($form_state['values']['pass_reset_email_textbox'])){
            form_set_error('pass_reset_email_textbox', t('In this text field you must enter a valid email address.'));
        }
        if(db_result(db_query("SELECT COUNT(*) FROM {users} WHERE mail = '".trim($form_state['values']['pass_reset_email_textbox'])."' ")) < 1){
            form_set_error('pass_reset_email_textbox', t('This is not a registered user\'s email address.'));
        }
    }
} 

function reset_password_form_submit($form, $form_state){
    global $user;
    $temp_password = cp_generate_password();
    if($form_state['values']['pass_reset_username_dropdown']){
        $uid = $form_state['values']['pass_reset_username_dropdown'];
        $uSQL = db_query("UPDATE {users} SET pass = '".md5($temp_password)."', status = 1 WHERE uid = ".$uid);
        $sql = db_query("SELECT name, mail FROM {users} WHERE uid = ".$uid);
        $d_array = db_fetch_array($sql);
        $username = $d_array['name'];
        $usermail = $d_array['mail'];
    }
    if($form_state['values']['pass_reset_username_textbox']){
        $username = trim($form_state['values']['pass_reset_username_textbox']);
        $uSQL = db_query("UPDATE {users} SET pass = '".md5($temp_password)."', status = 1 WHERE name = '".$username."' ");
        $sql = db_query("SELECT uid, mail FROM {users} WHERE name = '".$username."' ");
        $d_array = db_fetch_array($sql);
        $uid = $d_array['uid'];
        $usermail = $d_array['mail'];
    }
    if($form_state['values']['pass_reset_email_textbox']){
        $usermail = trim($form_state['values']['pass_reset_email_textbox']);
        $uSQL = db_query("UPDATE {users} SET pass = '".md5($temp_password)."', status = 1 WHERE mail = '".$usermail."' ");
        $sql = db_query("SELECT uid, name FROM {users} WHERE mail = '".$usermail."' ");
        $d_array = db_fetch_array($sql);
        $uid = $d_array['uid'];
        $username = $d_array['name'];
    }
    
    if($uSQL){
        $del_pass_pol_SQL = db_query("DELETE FROM {password_policy_force_change} WHERE uid = ".$uid);
        $ins_pass_pol_SQL = db_query("INSERT INTO {password_policy_force_change} (uid, force_change) VALUES ($uid, 1)");
        if($form_state['values']['pass_reset_send_mail'] == 1){
            drupal_set_message('Password changed to <b>'.$temp_password.'</b> and sent to <i>'.$usermail.'</i>', 'success');
            $email_from = "Support<support@domain.com>";
            drupal_mail('reset_password','cp_new_password', $usermail, 'en', array('pass'=>$temp_password, 'recipient'=>$username), $email_from);
        } else {
            drupal_set_message('Password changed to <b>'.$temp_password.'</b>', 'success');
        }
        
    } else{
        drupal_set_message('Password did not change.','error');
    }
}


/**
 * Implementation of hook_mail()
 */
 function reset_password_mail($key, &$message, $params){
    // mail out new password after user request
    if($key=="cp_new_password"){
        $message['subject'] = t('New Password Requested');

        $body = t('Dear !recipient,',array('!recipient'=> ucwords(str_replace(".", " ", $params['recipient']))),$message['language']);
        $body.= "\r\n\r\n";
        $body.= t('A new temporary password has been set for your Drupal account.',array(),$message['language']);
        $body.= "\r\n\r\n";
        $body.= t('To get started, click the following link or copy and paste the link into your browser.');
        $body.= "\r\n\r\n";
        $body.= t('!url', array('!url' => url('url-to-site/login', array('absolute' => TRUE))));
        $body.= "\r\n\r\n";
        $body.= t('On the login page, enter your username and temporary password.');
        $body.= "\r\n\r\n";
        $body.= t('Username: !recipient', array('!recipient' => $params['recipient']));
        $body.= "\r\n\r\n";
        $body.= t('Password: !password',array('!password'=>$params['pass']));
        $body.= "\r\n\r\n";
        $body.= t('Passwords expire every 90 days. Please ensure to login immediately to avoid disabling.',array(),$message['language']);
        $body.= "\r\n\r\n";
        $body.= t('On your first login, you will be asked to change the temporary password for security purposes. If you have any questions, please email our support staff at admin@domainname.com.',array(),$message['language']);
        $body.= "\r\n\r\n";
        $body.= t('Support Team',array(),$message['language']);
        $message['body'] = $body; 	
    } // end new password request

 } // end reset_password_mail

 
/**
 * Implements hook_block()
 */
function reset_password_block($op='list', $delta=0, $edit=array()){
	$block = array();
	global $base_url;
	$path = drupal_get_path('theme','theme_name');
	switch ($op) {
            case 'list':
                break;

            case 'view':
                if($delta==0){
                    $block["subject"] = t("Reset and Email Password");
                    $block["content"] = '<div id="">zero block</div>';
                }
                else if($delta==1){
                    $block["subject"] = t("Reset and Email Password");
                    $div.='<div class="reset-email-password">'.drupal_get_form('reset_password_form').'</div>';
                }
                // format and display form errors
                $errors = "";
                $errs = form_get_errors();
                if(count($errs)>0){
                    $errors .= '<div class="messages error"><ul>';
                    foreach($errs as $type => $value){
                        $errors.='<li>'.$value.'</li>';
                    }
                    $errors .= '</ul></div>';
                }      
		$block["content"] = $errors.'<div id="accordionWrap">'.$div.'</div>';
                break;
            default:
                break;
	}
	return $block;
} // end function reset_password_block
 
function user_list(){
    $sql = db_query("SELECT uid, name, mail FROM {users} WHERE uid != 1 AND uid != 0 ORDER BY name");
    $return_array = array();
    $return_array[] = "Please Select Users";
    while ($d_array = db_fetch_array($sql)){
        if(user_role($d_array['uid']) == 'channel partner' || user_role($d_array['uid']) == 'channel sales associate'){
            $return_array[$d_array['uid']] = $d_array['name'] . ' ('.$d_array['mail'] . ')';
        }
    }
    return $return_array;
}

function user_role($uid){
    $roleSQL = db_query("SELECT r.name FROM {role} AS r LEFT JOIN {users_roles} AS u on r.rid = u.rid WHERE u.uid = %d", $uid);
    $roleData = db_fetch_array($roleSQL);
    return $roleData['name'];
}
